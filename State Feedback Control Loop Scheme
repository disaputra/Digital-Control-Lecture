// Kode pemodelan sistem lup tertutup motor DC dengan pole placement (state feedback)
// Sistem Kendali Digital: Dede Irawan Saputra, S.Pd., M.T.
// Teknik Elektro Universitas Jenderal Achmad Yani
// 2020
// ---------------------------------------------------------

#define ENCA 2 // YELLOW
#define ENCB 3 // WHITE
#define PWM 10
#define IN2 9
#define IN1 8

int pulsa = 0;
int Ts = 100;
unsigned long currT;
unsigned long prevT;
float deltaT;
float rpm, rps;
float PwmValue;
float PulsePerRev = 48.00;

// closed loop
float K, Nbar;
long CurrTime;
long PrevTime;
float eprev;
float u;
float e;
int SetPoint;

// timer 
float Time;
float elapsedTime;
float timePrev;
float t;

// pole placement
void setup() {
  Serial.begin(115200);
  pinMode(ENCA, INPUT);
  pinMode(ENCB, INPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(PWM, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(ENCA), readEncoder, RISING);
}

void loop() {
  t += elapsedTime;

  currT = millis();
  if (currT - prevT == Ts) {
    rps = (pulsa / PulsePerRev)/0.1;
    rpm = rps * 60;
    pulsa = 0;
    prevT = currT;
    
    e = SetPoint - rpm;
    pole_placement();
    Serial.print(t,2);
    Serial.print(" ");
    Serial.print(SetPoint);
    Serial.print(" ");
    Serial.print(PwmValue);
    Serial.print(" ");
    Serial.print(e);
    Serial.print(" ");
    Serial.println(rpm);

  }

  Writepwm();
  
  //TIMER
  timePrev = Time;                            // the previous time is stored before the actual time read
  Time = millis();                            // actual time read
  elapsedTime = (Time - timePrev) / 1000;

}

void readEncoder() {
  pulsa++;
}

void pole_placement() {
  SetPoint = 200;

  //konstanta K
  K = 0.9243; // penguatan pole placement
  //K = 2;  // unstable
  Nbar = 1.7480; 
   //Nbar = 3.1556;

  //Time Difference
  CurrTime = micros();
  deltaT = (CurrTime - PrevTime)/1.0e6;

  //Error
  //float e = SetPoint - rpm;

  //Control Signal
  u = (SetPoint*Nbar) - (K*rpm);

  //Motor Power
  PwmValue = fabs(u);
  if (PwmValue > 255) {
    PwmValue = 255;
  }

  if(u < 0) {
    PwmValue = 0;
  }
  PrevTime = CurrTime;
}

void Writepwm() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(PWM, PwmValue);
}
